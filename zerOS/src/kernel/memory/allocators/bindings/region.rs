/* automatically generated by rust-bindgen 0.71.1 */

pub const zerOS_REGION_ALLOCATOR_H_INCLUDED_: u32 = 1;
pub const zerOS_COMMON_H_INCLUDED_: u32 = 1;
pub type zerOS_byte_t = u8;
impl zerOS_allocation_strategy
{
	pub const zerOS_ALLOC_STRAT_DEFAULT: zerOS_allocation_strategy = zerOS_allocation_strategy(0);
}
impl zerOS_allocation_strategy
{
	pub const zerOS_ALLOC_STRAT_BEST_FIT: zerOS_allocation_strategy = zerOS_allocation_strategy(1);
}
impl zerOS_allocation_strategy
{
	pub const zerOS_ALLOC_STRAT_FIRST_FIT: zerOS_allocation_strategy = zerOS_allocation_strategy(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct zerOS_allocation_strategy(pub u8);
pub type zerOS_region_reclaim_hook_t = ::core::option::Option<
	unsafe extern "C" fn(arg1: *mut zerOS_byte_t, arg2: usize, arg3: bool) -> bool
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zerOS_region_allocator
{
	_unused: [u8; 0]
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_create(
		region: *mut zerOS_byte_t,
		region_size: usize,
		static_mem: bool,
		authorize_reclaim: bool,
		preferred: zerOS_allocation_strategy,
		hook: zerOS_region_reclaim_hook_t
	) -> *mut zerOS_region_allocator;
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_alloc(
		allocator: *mut zerOS_region_allocator,
		size: usize,
		align: usize,
		strategy: zerOS_allocation_strategy
	) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_realloc(
		allocator: *mut zerOS_region_allocator,
		ptr: *mut ::core::ffi::c_void,
		old_size: usize,
		old_align: usize,
		size: usize,
		align: usize,
		strategy: zerOS_allocation_strategy
	) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_dealloc(
		allocator: *mut zerOS_region_allocator,
		ptr: *mut ::core::ffi::c_void
	);
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_contains(
		allocator: *mut zerOS_region_allocator,
		ptr: *mut ::core::ffi::c_void
	) -> bool;
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_is_static_region(allocator: *mut zerOS_region_allocator) -> bool;
}
unsafe extern "C" {
	pub fn zerOS_region_allocator_reclaim(allocator: *mut zerOS_region_allocator) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zerOS_region_allocator_additional_space_info
{
	pub addr: *mut zerOS_byte_t,
	pub size: usize
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of zerOS_region_allocator_additional_space_info"]
		[::core::mem::size_of::<zerOS_region_allocator_additional_space_info>() - 16usize];
	["Alignment of zerOS_region_allocator_additional_space_info"]
		[::core::mem::align_of::<zerOS_region_allocator_additional_space_info>() - 8usize];
	["Offset of field: zerOS_region_allocator_additional_space_info::addr"]
		[::core::mem::offset_of!(zerOS_region_allocator_additional_space_info, addr) - 0usize];
	["Offset of field: zerOS_region_allocator_additional_space_info::size"]
		[::core::mem::offset_of!(zerOS_region_allocator_additional_space_info, size) - 8usize];
};
unsafe extern "C" {
	pub fn zerOS_region_allocator_additional_space(
		allocator: *mut zerOS_region_allocator
	) -> zerOS_region_allocator_additional_space_info;
}
